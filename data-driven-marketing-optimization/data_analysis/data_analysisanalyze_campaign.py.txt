import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def analyze_marketing_campaign(data_path='data/marketing_campaign_data.csv', output_folder='data/analysis_results'):
    """Analyzes marketing campaign data and generates visualizations."""

    try:
        campaign_data = pd.read_csv(data_path)
    except FileNotFoundError:
        print(f"Error: Data file not found at {data_path}. Please run data generation script first.")
        return

    # Data Cleaning (basic - more robust cleaning needed in real-world)
    campaign_data['Date'] = pd.to_datetime(campaign_data['Date'])

    # Feature Engineering
    campaign_data['CTR'] = (campaign_data['Clicks'] / campaign_data['Impressions']) * 100 # Click-Through Rate (%)
    campaign_data['Conversion Rate'] = (campaign_data['Conversions'] / campaign_data['Clicks']) * 100 # Conversion Rate (%)
    campaign_data['CPA'] = campaign_data['Cost'] / campaign_data['Conversions'] # Cost Per Acquisition
    campaign_data.replace([float('inf'), float('-inf')], np.nan, inplace=True) # Handle potential division by zero
    campaign_data['CPA'].fillna(campaign_data['Cost'], inplace=True) # If no conversions, CPA is just Cost

    # 1. Channel Performance Comparison (Bar Chart)
    channel_performance = campaign_data.groupby('Channel').agg(
        {'Impressions': 'sum', 'Clicks': 'sum', 'Conversions': 'sum', 'Cost': 'sum'}
    ).reset_index()
    channel_performance['CTR'] = (channel_performance['Clicks'] / channel_performance['Impressions']) * 100
    channel_performance['Conversion Rate'] = (channel_performance['Conversions'] / channel_performance['Clicks']) * 100
    channel_performance['CPA'] = channel_performance['Cost'] / channel_performance['Conversions']
    channel_performance.replace([float('inf'), float('-inf')], np.nan, inplace=True)
    channel_performance['CPA'].fillna(channel_performance['Cost'], inplace=True)

    plt.figure(figsize=(12, 6))
    sns.barplot(x='Channel', y='Conversions', data=channel_performance, palette="viridis")
    plt.title('Conversions by Marketing Channel')
    plt.xlabel('Marketing Channel')
    plt.ylabel('Total Conversions')
    plt.savefig(f'{output_folder}/conversions_by_channel.png')
    plt.close()
    print(f"Visualization saved: {output_folder}/conversions_by_channel.png")

    # 2. CTR and Conversion Rate by Channel (Side-by-side Bar Chart)
    metrics = ['CTR', 'Conversion Rate']
    fig, axes = plt.subplots(1, 2, figsize=(18, 6))
    for i, metric in enumerate(metrics):
        sns.barplot(x='Channel', y=metric, data=channel_performance, palette="plasma", ax=axes[i])
        axes[i].set_title(f'{metric} by Marketing Channel')
        axes[i].set_xlabel('Marketing Channel')
        axes[i].set_ylabel(metric)
    plt.tight_layout()
    plt.savefig(f'{output_folder}/channel_metrics_comparison.png')
    plt.close()
    print(f"Visualization saved: {output_folder}/channel_metrics_comparison.png")

    # 3. CPA by Channel (Bar Chart)
    plt.figure(figsize=(12, 6))
    sns.barplot(x='Channel', y='CPA', data=channel_performance, palette="magma")
    plt.title('Cost Per Acquisition (CPA) by Marketing Channel')
    plt.xlabel('Marketing Channel')
    plt.ylabel('CPA ($)')
    plt.savefig(f'{output_folder}/cpa_by_channel.png')
    plt.close()
    print(f"Visualization saved: {output_folder}/cpa_by_channel.png")

    # 4. (Example - Time Series Analysis could be added here for trends over time if Date granularity is higher)

    print(f"\nAnalysis completed. Visualizations saved to: {output_folder}/")

if __name__ == "__main__":
    analyze_marketing_campaign()